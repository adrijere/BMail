#!/usr/bin/python2.7

import  sys
import  xml.etree.ElementTree as e
import  smtplib
from    email.MIMEMultipart import MIMEMultipart
from    email.MIMEText import MIMEText
import  email
import  imaplib
import  poplib
import  string

def     set_variable(name, name2, root, cpt):
    for x in root.iter(name):
        name2 = x.text
    if (cpt == 0):
        return (name2)
    else:
        return (int(name2))

#Parsing du fichier XML en global
tree = e.parse('config.xml')
root = tree.getroot()
server = set_variable('server_smtp', 'server', root, 0)
server_imap = set_variable('server_imap', 'server_imap', root, 0)
server_pop = set_variable('server_pop', 'server_pop', root, 0)
protocol = set_variable('protocol', 'protocol', root, 0)
login = set_variable('login', 'login', root, 0)
password = set_variable('password', 'password', root, 0)
folder = set_variable('folder', 'folder', root, 0)
smtp_port = set_variable('smtp_port', 'smtp_port', root, 1)

def     get_first_text_block(email_message_instance):
    maintype = email_message_instance.get_content_maintype()
    if maintype == 'multipart':
        for part in email_message_instance.get_payload():
            if part.get_content_maintype() == 'text':
                return part.get_payload()
            elif maintype == 'text':
                return email_message_instance.get_payload()

#Protocole SMTP
def     SMTP_protocol():
   SUBJECT = raw_input("Object: ")
   message1 = raw_input("Message: ")
   TO = raw_input("To: ")
   FROM = login
   message = MIMEMultipart()
   message['From'] = FROM
   message['To'] = TO
   message['Subject'] = SUBJECT
   message.attach(MIMEText(message1, 'plain'))
   mail = smtplib.SMTP(server, smtp_port)
   mail.ehlo()
   mail.starttls()
   mail.ehlo()
   try:
       mail.login(FROM, password)
   except:
       print "Username or password is incorrect. Verify with your browser."
       sys.exit()
   text = message.as_string()
   try:
       mail.sendmail(FROM, TO, text)
   except:
       print "Can't send the mail. Verify the adress of the message recipient."
       sys.exit()
   mail.quit()

#Protocole POP3
def     POP3_protocol():
    mail = poplib.POP3_SSL(server_pop) #fichier de config
    try:
        mail.user(login)
        mail.pass_(password)
    except:
        print "Username or password is incorrect."
        sys.exit()
    numMessage = len(mail.list()[1])
    for i in reversed(range(numMessage)):
        message = mail.retr(i + 1)
        strmail = string.join(message[1], "\n")
        themail = email.message_from_string(strmail)
        print themail["From"]
        print themail["Subject"]
        print themail["To"]
        print themail["Date"]
        print get_first_text_block(themail)
        print "\n"
    mail.quit()

#Protocole IMAP
def     IMAP_protocol():
    mail = imaplib.IMAP4_SSL(server_imap) #fichier de config
    try:
        mail.login(login, password) #fichier conf
    except:
        print "Username or password is incorrect."
        sys.exit()
    mail.list()
    mail.select("inbox")
    nb_mail = len(mail.search(None, "ALL")[1][0].split())
    nb_mail_neg = -1 * nb_mail
    print "Number of mails : ", nb_mail
    nb_mail_neg = nb_mail_neg - 1;
    for i in range(-1, nb_mail_neg, -1):
        result, data = mail.uid('search', None, "ALL")
        latest_email_uid = data[0].split()[i]
        result, data = mail.uid('fetch', latest_email_uid, '(RFC822)')
        raw_email = data[0][1]
        email_message = email.message_from_string(raw_email)
        numero_chrono = i * -1
        print numero_chrono
        print email_message['Delivered-To']
        print email.utils.parseaddr(email_message['From'])
        print email_message['Subject']
    choice = input("What do you want?:\n1: Read an Email\n2: Delete a Email\nChoice : ")
    if choice == 1:
        choice = input("Enter the number of the mail: ")
        choice = choice * -1
        result, data = mail.uid('search', None, "ALL")
        latest_email_uid = data[0].split()[choice]
        result, data = mail.uid('fetch', latest_email_uid, '(RFC822)')
        raw_email = data[0][1]
        email_message = email.message_from_string(raw_email)
        print email_message['Delivered-To']
        print email.utils.parseaddr(email_message['From'])
        print email_message['Subject']
        print get_first_text_block(email_message)
    elif choice == 2:
        choice = input("Enter the number of the mail: ")
        try:
            choice = -1 * choice
            result, data = mail.search(None, "ALL");
            latest_email_uid = data[0].split()[choice]
            mail.store(latest_email_uid, '+FLAGS', '\\Deleted')
            mail.expunge()
        except:
            print "Can't possible to delete message."
            sys.exit()

def     loop():
    print "What do you want?\n1: Send a mail\n2: Read your mail with IMAP\n3: Read ALL your mails with pop3"
    choice = raw_input("Choice: ");
    try:
        choice = int(choice)
    except:
        choice = 5
    if choice == 1:
        SMTP_protocol()
    elif choice == 2:
        IMAP_protocol()
    elif choice == 3:
        POP3_protocol()
    else:
        print "Unknown choice"
        print "Quit"

def     main():
    loop()

if __name__ == '__main__':
    sys.exit(main())
